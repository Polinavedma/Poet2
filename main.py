import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
questions = [
    {
        "q": "1Ô∏è‚É£ –ö–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?",
        "a": [
            ("üìú –ü–æ—ç–∑–∏—è", {"Mayakovsky": 2, "Tsvetaeva": 2, "Akhmatova": 2, "Pasternak": 2, "Brodsky": 2, "Esenin": 1}),
            ("üéª –ú—É–∑—ã–∫–∞", {"Esenin": 2, "Akhmatova": 1, "Brodsky": 1, "Pasternak": 1}),
            ("üé≠ –¢–µ–∞—Ç—Ä", {"Mayakovsky": 1, "Tsvetaeva": 1, "Brodsky": 2}),
            ("üé® –ñ–∏–≤–æ–ø–∏—Å—å", {"Akhmatova": 1, "Esenin": 1})
        ]
    }
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
]

@bot.message_handler(commands=["start"])
def start_quiz(message):
    chat_id = message.chat.id
    user_data[chat_id] = {"step": 0, "scores": {}}
    ask_question(chat_id)

def ask_question(chat_id):
    step = user_data[chat_id]["step"]
    if step < len(questions):
        q = questions[step]
        markup = InlineKeyboardMarkup()
        for i, (text, scores) in enumerate(q["a"]):
            markup.add(InlineKeyboardButton(text, callback_data=f"ans_{step}_{i}"))
        bot.send_message(chat_id, q["q"], reply_markup=markup)
    else:
        check_subscription(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    chat_id = call.message.chat.id
    _, step, index = call.data.split("_")
    step = int(step)
    index = int(index)
    scores = questions[step]["a"][index][1]
    for poet, pts in scores.items():
        user_data[chat_id]["scores"][poet] = user_data[chat_id]["scores"].get(poet, 0) + pts
    user_data[chat_id]["step"] += 1
    ask_question(chat_id)

def check_subscription(chat_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, chat_id)
        if member.status in ['creator', 'administrator', 'member']:
            show_result(chat_id)
        else:
            ask_to_subscribe(chat_id)
    except Exception:
        ask_to_subscribe(chat_id)

def ask_to_subscribe(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
    bot.send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def handle_check_sub(call):
    check_subscription(call.message.chat.id)

def show_result(chat_id):
    scores = user_data[chat_id]["scores"]
    result = max(scores, key=scores.get)
    poet_names = {
        "Mayakovsky": "‚ö° –¢—ã ‚Äî –í–ª–∞–¥–∏–º–∏—Ä –ú–∞—è–∫–æ–≤—Å–∫–∏–π!",
        "Tsvetaeva": "üïØ –¢—ã ‚Äî –ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞!",
        "Akhmatova": "üìú –¢—ã ‚Äî –ê–Ω–Ω–∞ –ê—Ö–º–∞—Ç–æ–≤–∞!",
        "Esenin": "üåø –¢—ã ‚Äî –°–µ—Ä–≥–µ–π –ï—Å–µ–Ω–∏–Ω!",
        "Pasternak": "üß† –¢—ã ‚Äî –ë–æ—Ä–∏—Å –ü–∞—Å—Ç–µ—Ä–Ω–∞–∫!",
        "Brodsky": "üï∂ –¢—ã ‚Äî –ò–æ—Å–∏—Ñ –ë—Ä–æ–¥—Å–∫–∏–π!"
    }
    bot.send_message(chat_id, poet_names.get(result, "–ü–æ—ç—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))

bot.infinity_polling()